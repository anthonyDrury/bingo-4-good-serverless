service:
  name: bingo-4-good-serverless

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    USERS_TABLE: Users
    BINGO_CARDS_TABLE: Bingo_Cards
    BINGO_ITEMS_TABLE: Bingo_Items
    BINGO_MANAGE_TABLE: Bingo_Manage
    COGNITO_ISSUER: ${file(../config.js).COGNITO_ISSUER}
  logs:
    httpApi: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BINGO_CARDS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BINGO_ITEMS_TABLE}"

functions:
  getCurrentUser:
    handler: src/handlers/get.getCurrentUser
    events:
      - http:
          path: getCurrentUser
          method: get
          cors: true
  getFriends:
    handler: src/handlers/post.getFriends
    events:
      - http:
          path: getFriends
          method: post
          cors: true
  addFriend:
    events:
      - http:
          path: addFriend
          method: post
          cors: true
    handler: src/handlers/post.addFriend
  searchUsers:
    events:
      - http:
          path: searchUsers
          method: get
          cors: true
          querystrings:
            url: true
    handler: src/handlers/get.searchUsers
  registerUser:
    events:
      - http:
          path: registerUser
          method: post
          cors: true
          authorizer: authorizerFunc
    handler: src/handlers/post.registerUser
  authorizerFunc:
    handler: src/handlers/authorizer.authorize
# resources:
#   Resources:
#     Users:
#       Type: AWS::DynamoDB::Table
#       DeletionPolicy: Retain # Keeps around the DynamoDB resource when we redeploy/destroy
#       Properties:
#         AttributeDefinitions:
#           - AttributeName: _id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: _id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.USERS_TABLE}
#     Bingo_cards:
#       Type: AWS::DynamoDB::Table
#       DeletionPolicy: Retain # Keeps around the DynamoDB resource when we redeploy/destroy
#       Properties:
#         AttributeDefinitions:
#           - AttributeName: _id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: _id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.BINGO_CARDS_TABLE}
#     Bingo_Items:
#       Type: AWS::DynamoDB::Table
#       DeletionPolicy: Retain # Keeps around the DynamoDB resource when we redeploy/destroy
#       Properties:
#         AttributeDefinitions:
#           - AttributeName: _id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: _id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.BINGO_ITEMS_TABLE}
